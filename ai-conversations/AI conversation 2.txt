----------------------------------
Tool: ChatGPT
Date: 2025-10-24
----------------------------------


ME: This is my definition to fetech weather information, is there a way to improve upon this?

def get_weather_data(location, forecast_days=5):
    api_key = "707319d8eaa81955d0542f21f32593ae"
    base_url = "http://api.openweathermap.org/data/2.5/"

    try:
        # Get latitude and longitude for the location
        geocode_url = f"{base_url}weather?q={location}&appid={api_key}"
        geocode_response = requests.get(geocode_url)
        geocode_response.raise_for_status()
        geocode_data = geocode_response.json()

        if geocode_data["cod"] != 200:
            print(f"Error: {geocode_data['message']}")
            return None

        lat = geocode_data["coord"]["lat"]
        lon = geocode_data["coord"]["lon"]

        # Get current weather data
        current_weather_url = f"{base_url}weather?lat={lat}&lon={lon}&units=metric&appid={api_key}"
        current_weather_response = requests.get(current_weather_url)
        current_weather_response.raise_for_status()
        current_weather_data = current_weather_response.json()

        # Get the weather forecast using latitude and longitude
        weather_url = f"{base_url}forecast?lat={lat}&lon={lon}&cnt={forecast_days * 8}&units=metric&appid={api_key}" # OpenWeatherMap provides forecast in 3-hour intervals, 8 intervals per day
        weather_response = requests.get(weather_url)
        weather_response.raise_for_status()
        forecast_data = weather_response.json()

        # Combine current and forecast data
        weather_data = {
            "current": current_weather_data,
            "forecast": forecast_data
        }

        return weather_data

    except requests.exceptions.RequestException as e:
        print(f"Error fetching weather data: {e}")
        return None
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        return None


CHATGPT: Thatâ€™s a solid start â€” itâ€™s clear and functional. However, thereâ€™s definitely room to improve readability, robustness, efficiency, and security.

Hereâ€™s a breakdown of suggested improvements and an improved version of your function below.

ðŸ”§ Key Improvements
1. Security: Donâ€™t hardcode API keys

Hardcoding API keys is risky â€” they can leak if you share your code or push to GitHub.
âœ… Use environment variables (via os.getenv("OPENWEATHER_API_KEY")).

2. Avoid redundant API calls

Youâ€™re calling /weather twice â€” once to get coordinates and again for current conditions.
âœ… You can instead use OpenWeatherâ€™s Geocoding API for coordinates, or directly use the /forecast and /weather endpoints if you already know the city name (they both accept q={location}).

3. Error handling and validation

âœ… Add better checks for missing fields (e.g., if coord isnâ€™t in the response).
âœ… Return structured error info instead of just printing.

4. Code cleanliness and readability

âœ… Add docstrings and type hints.
âœ… Use requests.Session() for efficiency if multiple API calls are made.

5. Optional improvement: caching

If youâ€™ll be calling this often, add caching via functools.lru_cache or requests_cache to avoid hitting the API unnecessarily.


import os
import requests

def get_weather_data(location: str, forecast_days: int = 5) -> dict | None:
    """
    Fetches current weather and forecast data for a given location using the OpenWeatherMap API.

    Args:
        location (str): City name or location query (e.g. "London,UK").
        forecast_days (int, optional): Number of forecast days to fetch (default = 5).

    Returns:
        dict | None: Dictionary containing 'current' and 'forecast' weather data, or None on failure.
    """
    api_key = os.getenv("OPENWEATHER_API_KEY")
    if not api_key:
        print("Error: Missing OpenWeather API key. Set OPENWEATHER_API_KEY environment variable.")
        return None

    base_url = "https://api.openweathermap.org/data/2.5/"

    try:
        # Fetch current weather (includes coordinates)
        current_url = f"{base_url}weather"
        params = {"q": location, "units": "metric", "appid": api_key}
        current_resp = requests.get(current_url, params=params)
        current_resp.raise_for_status()
        current_data = current_resp.json()

        lat, lon = current_data.get("coord", {}).get("lat"), current_data.get("coord", {}).get("lon")
        if lat is None or lon is None:
            print("Error: Could not find coordinates for the specified location.")
            return None

        # Fetch forecast data (3-hour intervals, 8 per day)
        forecast_url = f"{base_url}forecast"
        forecast_params = {"lat": lat, "lon": lon, "cnt": forecast_days * 8, "units": "metric", "appid": api_key}
        forecast_resp = requests.get(forecast_url, params=forecast_params)
        forecast_resp.raise_for_status()
        forecast_data = forecast_resp.json()

        return {"current": current_data, "forecast": forecast_data}

    except requests.exceptions.HTTPError as e:
        print(f"HTTP error: {e} - {current_resp.text if 'current_resp' in locals() else ''}")
    except requests.exceptions.RequestException as e:
        print(f"Network error: {e}")
    except Exception as e:
        print(f"Unexpected error: {e}")

    return None

